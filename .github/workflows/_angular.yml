on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: Name of the target environment.

concurrency:
  group: angular-${{ inputs.environment }}
  cancel-in-progress: true

jobs:
  build:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 20.x ]

    steps:
      - uses: actions/checkout@v4.1.1

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v4.0.0
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build -- --configuration production

      - name: Archive build
        if: success()
        uses: actions/upload-artifact@v4.3.1
        with:
          name: deploy_dist
          path: dist

  containerization:
    environment: ${{ inputs.environment }}
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download build
        uses: actions/download-artifact@v4.1.2
        with:
          name: deploy_dist
          path: dist

      # - name: test
      #   run: pwd && ls -lR

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.GOOGLE_REGION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Build and push image to registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/angular/Dockerfile
          #          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          tags: ${{ secrets.GOOGLE_REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT_ID }}/${{ vars.ANGULAR_GAR_REPO }}/${{ secrets.ANGULAR_IMAGE_NAME }}:${{ inputs.environment }}-${{ github.sha }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.0
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - id: 'deploy'
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ secrets.ANGULAR_IMAGE_NAME }}-${{ inputs.environment }}
          image: ${{ secrets.GOOGLE_REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT_ID }}/${{ vars.ANGULAR_GAR_REPO }}/${{ secrets.ANGULAR_IMAGE_NAME }}:${{ inputs.environment }}-${{ github.sha }}
          region: ${{ secrets.GOOGLE_REGION }}
          suffix: ${{ github.sha }}
          env_vars: |
            NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
            NGINX_HOST=${{ vars.HOST_URL }}
